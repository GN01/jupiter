diff -Nrpu linux-3.10.0-693.5.2.el7.orig/include/net/inet_common.h linux-3.10.0-693.5.2.el7/include/net/inet_common.h
--- linux-3.10.0-693.5.2.el7.orig/include/net/inet_common.h	2019-01-14 16:30:01.150691792 +0800
+++ linux-3.10.0-693.5.2.el7/include/net/inet_common.h	2019-01-14 16:35:58.882624708 +0800
@@ -1,7 +1,7 @@
 #ifndef _INET_COMMON_H
 #define _INET_COMMON_H
 
-extern const struct proto_ops inet_stream_ops;
+extern struct proto_ops inet_stream_ops;
 extern const struct proto_ops inet_dgram_ops;
 
 /*
diff -Nrpu linux-3.10.0-693.5.2.el7.orig/include/net/ipv6.h linux-3.10.0-693.5.2.el7/include/net/ipv6.h
--- linux-3.10.0-693.5.2.el7.orig/include/net/ipv6.h	2019-01-14 16:30:01.151691786 +0800
+++ linux-3.10.0-693.5.2.el7/include/net/ipv6.h	2019-01-14 16:37:57.403934070 +0800
@@ -889,7 +889,7 @@ int inet6_hash_connect(struct inet_timew
 /*
  * reassembly.c
  */
-extern const struct proto_ops inet6_stream_ops;
+extern struct proto_ops inet6_stream_ops;
 extern const struct proto_ops inet6_dgram_ops;
 
 struct group_source_req;
@@ -937,4 +937,13 @@ int ipv6_sock_mc_join(struct sock *sk, i
 		      const struct in6_addr *addr);
 int ipv6_sock_mc_drop(struct sock *sk, int ifindex,
 		      const struct in6_addr *addr);
+
+/* public func in tcp_ipv6.c */
+extern struct sock * tcp_v6_syn_recv_sock(struct sock *sk, struct sk_buff *skb,
+                                         struct request_sock *req,
+                                         struct dst_entry *dst);
+extern struct inet_connection_sock_af_ops ipv6_specific;
+
+extern void tcp_v6_destroy_sock(struct sock *sk);
+
 #endif /* _NET_IPV6_H */
diff -Nrpu linux-3.10.0-693.5.2.el7.orig/include/net/transp_v6.h linux-3.10.0-693.5.2.el7/include/net/transp_v6.h
--- linux-3.10.0-693.5.2.el7.orig/include/net/transp_v6.h	2019-01-14 16:30:01.161691728 +0800
+++ linux-3.10.0-693.5.2.el7/include/net/transp_v6.h	2019-01-14 16:35:51.118669570 +0800
@@ -47,7 +47,7 @@ void ip6_dgram_sock_seq_show(struct seq_
 #define LOOPBACK4_IPV6 cpu_to_be32(0x7f000006)
 
 /* address family specific functions */
-extern const struct inet_connection_sock_af_ops ipv4_specific;
+extern struct inet_connection_sock_af_ops ipv4_specific;
 
 void inet6_destroy_sock(struct sock *sk);
 
diff -Nrpu linux-3.10.0-693.5.2.el7.orig/net/ipv4/af_inet.c linux-3.10.0-693.5.2.el7/net/ipv4/af_inet.c
--- linux-3.10.0-693.5.2.el7.orig/net/ipv4/af_inet.c	2019-01-14 16:30:01.258691168 +0800
+++ linux-3.10.0-693.5.2.el7/net/ipv4/af_inet.c	2019-01-14 16:38:10.954854066 +0800
@@ -901,7 +901,7 @@ static int inet_compat_ioctl(struct sock
 }
 #endif
 
-const struct proto_ops inet_stream_ops = {
+struct proto_ops inet_stream_ops = {
 	.family		   = PF_INET,
 	.owner		   = THIS_MODULE,
 	.release	   = inet_release,
diff -Nrpu linux-3.10.0-693.5.2.el7.orig/net/ipv4/tcp_ipv4.c linux-3.10.0-693.5.2.el7/net/ipv4/tcp_ipv4.c
--- linux-3.10.0-693.5.2.el7.orig/net/ipv4/tcp_ipv4.c	2019-01-14 16:30:01.262691145 +0800
+++ linux-3.10.0-693.5.2.el7/net/ipv4/tcp_ipv4.c	2019-01-14 16:38:20.104800044 +0800
@@ -1807,7 +1807,7 @@ void inet_sk_rx_dst_set(struct sock *sk,
 }
 EXPORT_SYMBOL(inet_sk_rx_dst_set);
 
-const struct inet_connection_sock_af_ops ipv4_specific = {
+struct inet_connection_sock_af_ops ipv4_specific = {
 	.queue_xmit	   = ip_queue_xmit,
 	.send_check	   = tcp_v4_send_check,
 	.rebuild_header	   = inet_sk_rebuild_header,
diff -Nrpu linux-3.10.0-693.5.2.el7.orig/net/ipv6/af_inet6.c linux-3.10.0-693.5.2.el7/net/ipv6/af_inet6.c
--- linux-3.10.0-693.5.2.el7.orig/net/ipv6/af_inet6.c	2019-01-14 16:30:01.263691139 +0800
+++ linux-3.10.0-693.5.2.el7/net/ipv6/af_inet6.c	2019-01-14 16:38:35.094711544 +0800
@@ -518,7 +518,7 @@ int inet6_ioctl(struct socket *sock, uns
 }
 EXPORT_SYMBOL(inet6_ioctl);
 
-const struct proto_ops inet6_stream_ops = {
+struct proto_ops inet6_stream_ops = {
 	.family		   = PF_INET6,
 	.owner		   = THIS_MODULE,
 	.release	   = inet6_release,
@@ -543,6 +543,7 @@ const struct proto_ops inet6_stream_ops
 	.compat_getsockopt = compat_sock_common_getsockopt,
 #endif
 };
+EXPORT_SYMBOL(inet6_stream_ops);
 
 const struct proto_ops inet6_dgram_ops = {
 	.family		   = PF_INET6,
diff -Nrpu linux-3.10.0-693.5.2.el7.orig/net/ipv6/tcp_ipv6.c linux-3.10.0-693.5.2.el7/net/ipv6/tcp_ipv6.c
--- linux-3.10.0-693.5.2.el7.orig/net/ipv6/tcp_ipv6.c	2019-01-14 16:30:01.266691122 +0800
+++ linux-3.10.0-693.5.2.el7/net/ipv6/tcp_ipv6.c	2019-01-14 16:39:03.952541167 +0800
@@ -77,7 +77,7 @@ static void	tcp_v6_reqsk_send_ack(struct
 static int	tcp_v6_do_rcv(struct sock *sk, struct sk_buff *skb);
 
 static const struct inet_connection_sock_af_ops ipv6_mapped;
-static const struct inet_connection_sock_af_ops ipv6_specific;
+struct inet_connection_sock_af_ops ipv6_specific;
 #ifdef CONFIG_TCP_MD5SIG
 static const struct tcp_sock_af_ops tcp_sock_ipv6_specific;
 static const struct tcp_sock_af_ops tcp_sock_ipv6_mapped_specific;
@@ -1042,7 +1042,7 @@ drop:
 	return 0; /* don't send reset */
 }
 
-static struct sock *tcp_v6_syn_recv_sock(struct sock *sk, struct sk_buff *skb,
+struct sock *tcp_v6_syn_recv_sock(struct sock *sk, struct sk_buff *skb,
 					 struct request_sock *req,
 					 struct dst_entry *dst)
 {
@@ -1242,6 +1242,7 @@ out:
 	NET_INC_STATS_BH(sock_net(sk), LINUX_MIB_LISTENDROPS);
 	return NULL;
 }
+EXPORT_SYMBOL(tcp_v6_syn_recv_sock);
 
 /* The socket must have it's spinlock held when we get
  * here.
@@ -1580,7 +1581,7 @@ static struct timewait_sock_ops tcp6_tim
 	.twsk_destructor = tcp_twsk_destructor,
 };
 
-static const struct inet_connection_sock_af_ops ipv6_specific = {
+struct inet_connection_sock_af_ops ipv6_specific = {
 	.queue_xmit	   = inet6_csk_xmit,
 	.send_check	   = tcp_v6_send_check,
 	.rebuild_header	   = inet6_sk_rebuild_header,
@@ -1600,6 +1601,7 @@ static const struct inet_connection_sock
 #endif
 	.mtu_reduced	   = tcp_v6_mtu_reduced,
 };
+EXPORT_SYMBOL(ipv6_specific);
 
 #ifdef CONFIG_TCP_MD5SIG
 static const struct tcp_sock_af_ops tcp_sock_ipv6_specific = {
@@ -1658,11 +1660,12 @@ static int tcp_v6_init_sock(struct sock
 	return 0;
 }
 
-static void tcp_v6_destroy_sock(struct sock *sk)
+void tcp_v6_destroy_sock(struct sock *sk)
 {
 	tcp_v4_destroy_sock(sk);
 	inet6_destroy_sock(sk);
 }
+EXPORT_SYMBOL(tcp_v6_destroy_sock);
 
 #ifdef CONFIG_PROC_FS
 /* Proc filesystem TCPv6 sock list dumping. */
diff -Nrpu linux-3.10.0-693.5.2.el7.orig/net/Kconfig linux-3.10.0-693.5.2.el7/net/Kconfig
--- linux-3.10.0-693.5.2.el7.orig/net/Kconfig	2019-01-14 16:30:01.242691260 +0800
+++ linux-3.10.0-693.5.2.el7/net/Kconfig	2019-01-14 16:39:20.393444100 +0800
@@ -49,6 +49,7 @@ source "net/packet/Kconfig"
 source "net/unix/Kconfig"
 source "net/xfrm/Kconfig"
 source "net/iucv/Kconfig"
+source "net/toa/Kconfig"
 
 config INET
 	bool "TCP/IP networking"
diff -Nrpu linux-3.10.0-693.5.2.el7.orig/net/Makefile linux-3.10.0-693.5.2.el7/net/Makefile
--- linux-3.10.0-693.5.2.el7.orig/net/Makefile	2019-01-14 16:30:01.242691260 +0800
+++ linux-3.10.0-693.5.2.el7/net/Makefile	2019-01-14 16:39:29.694389187 +0800
@@ -70,6 +70,7 @@ obj-$(CONFIG_NFC)		+= nfc/
 obj-$(CONFIG_OPENVSWITCH)	+= openvswitch/
 obj-$(CONFIG_VSOCKETS)	+= vmw_vsock/
 obj-$(CONFIG_NET_MPLS_GSO)	+= mpls/
+obj-$(CONFIG_TOA)		+= toa/
 ifneq ($(CONFIG_NET_SWITCHDEV),)
 obj-y				+= switchdev/
 endif
diff -Nrpu linux-3.10.0-693.5.2.el7.orig/net/toa/Kconfig linux-3.10.0-693.5.2.el7/net/toa/Kconfig
--- linux-3.10.0-693.5.2.el7.orig/net/toa/Kconfig	1970-01-01 08:00:00.000000000 +0800
+++ linux-3.10.0-693.5.2.el7/net/toa/Kconfig	2019-01-14 15:24:26.000000000 +0800
@@ -0,0 +1,9 @@
+config TOA
+       tristate "The private TCP option for support LVS full-NAT feature"
+       default m
+       ---help---
+         This option saves the original IP address and source port of a TCP segment
+         after LVS performed NAT on it. So far, this module only supports IPv4 and
+         IPv6 mapped IPv4.
+
+         Say m if unsure.
diff -Nrpu linux-3.10.0-693.5.2.el7.orig/net/toa/Makefile linux-3.10.0-693.5.2.el7/net/toa/Makefile
--- linux-3.10.0-693.5.2.el7.orig/net/toa/Makefile	1970-01-01 08:00:00.000000000 +0800
+++ linux-3.10.0-693.5.2.el7/net/toa/Makefile	2019-01-14 14:07:16.000000000 +0800
@@ -0,0 +1,4 @@
+#
+# Makefile for TOA module.
+#
+obj-$(CONFIG_TOA) += toa.o
diff -Nrpu linux-3.10.0-693.5.2.el7.orig/net/toa/toa.c linux-3.10.0-693.5.2.el7/net/toa/toa.c
--- linux-3.10.0-693.5.2.el7.orig/net/toa/toa.c	1970-01-01 08:00:00.000000000 +0800
+++ linux-3.10.0-693.5.2.el7/net/toa/toa.c	2019-01-14 16:13:27.000000000 +0800
@@ -0,0 +1,470 @@
+#include "toa.h"
+
+/*
+ * Supports IPv6.
+ */
+
+/*
+ * TOA	a new Tcp Option as Address,
+ * here address including IP and Port.
+ * the real {IP,Port} can be added into option field of TCP header,
+ * with LVS FULLNAT model, the realservice are still able to receive real {IP,Port} info.
+ * So far, this module only supports IPv4 and IPv6 mapped IPv4.
+ */
+
+static struct kmem_cache *toa6_slab;
+
+unsigned long sk_data_ready_addr = 0;
+
+/*
+ * Statistics of toa in proc /proc/net/toa_stats
+ */
+
+struct toa_stats_entry toa_stats[] = {
+	TOA_STAT_ITEM("syn_recv_sock_toa", SYN_RECV_SOCK_TOA_CNT),
+	TOA_STAT_ITEM("syn_recv_sock_no_toa", SYN_RECV_SOCK_NO_TOA_CNT),
+	TOA_STAT_ITEM("getname_toa_ok", GETNAME_TOA_OK_CNT),
+	TOA_STAT_ITEM("getname_toa_mismatch", GETNAME_TOA_MISMATCH_CNT),
+	TOA_STAT_ITEM("getname_toa_bypass", GETNAME_TOA_BYPASS_CNT),
+	TOA_STAT_ITEM("getname_toa_empty", GETNAME_TOA_EMPTY_CNT),
+	TOA_STAT_END
+};
+
+DEFINE_TOA_STAT(struct toa_stat_mib, ext_stats);
+
+/*
+ * Funcs for toa hooks
+ */
+
+/* Parse TCP options in skb, try to get client ip, port
+ * @param skb [in] received skb, it should be a ack/get-ack packet.
+ * @return NULL if we don't get client ip/port;
+ *         value of toa_data in ret_ptr if we get client ip/port.
+ */
+static void * get_toa_data(struct sk_buff *skb)
+{
+	struct tcphdr *th;
+	int length;
+	unsigned char *ptr;
+
+	TOA_DBG("get_toa_data called\n");
+
+	if (NULL != skb) {
+		th = tcp_hdr(skb);
+		length = (th->doff * 4) - sizeof (struct tcphdr);
+		ptr = (unsigned char *) (th + 1);
+
+		while (length > 0) {
+			int opcode = *ptr++;
+			int opsize;
+			switch (opcode) {
+			case TCPOPT_EOL:
+				return NULL;
+			case TCPOPT_NOP:	/* Ref: RFC 793 section 3.1 */
+				length--;
+				continue;
+			default:
+				opsize = *ptr++;
+				if (opsize < 2)	/* "silly options" */
+					return NULL;
+				if (opsize > length)
+					return NULL;	/* don't parse partial options */
+				switch(opcode) {
+				case TCPOPT_TOA:
+					if (TCPOLEN_TOA == opsize) {
+						struct toa_data tdata;
+						void *ret_ptr = NULL;
+
+						memcpy(&tdata, ptr - 2, sizeof (tdata));
+						TOA_DBG("find toa data: ip = %u.%u.%u.%u, port = %u\n",
+							NIPQUAD(tdata.ip), ntohs(tdata.port));
+						memcpy(&ret_ptr, &tdata, sizeof (ret_ptr));
+						TOA_DBG("coded toa data: %p\n", ret_ptr);
+						return ret_ptr;
+					}
+					break;
+				case TCPOPT_TOA6:
+					if (TCPOLEN_TOA6 == opsize) {
+						struct toa6_data *tdata;
+
+						tdata = kmem_cache_alloc(toa6_slab, GFP_KERNEL);
+						if (tdata)
+							memcpy(tdata, ptr - 2, sizeof(struct toa6_data));
+						return tdata;
+					}
+					break;
+				}
+				ptr += opsize - 2;
+				length -= opsize;
+			}
+		}
+	}
+	return NULL;
+}
+
+/* get client ip from socket
+ * @param sock [in] the socket to getpeername() or getsockname()
+ * @param uaddr [out] the place to put client ip, port
+ * @param uaddr_len [out] lenth of @uaddr
+ * @peer [in] if(peer), try to get remote address; if(!peer), try to get local address
+ * @return return what the original inet_getname() returns.
+ */
+static int
+inet_getname_toa(struct socket *sock, struct sockaddr *uaddr, int *uaddr_len, int peer)
+{
+	int retval = 0;
+	struct sock *sk = sock->sk;
+	struct sockaddr_in *sin = (struct sockaddr_in *) uaddr;
+	struct toa_data tdata;
+
+	TOA_DBG("inet_getname_toa called, sk->sk_user_data is %p\n", sk->sk_user_data);
+
+	/* call orginal one */
+	retval = inet_getname(sock, uaddr, uaddr_len, peer);
+
+	/* set our value if need */
+	if (retval == 0 && NULL != sk->sk_user_data && peer) {
+		if (sk_data_ready_addr == (unsigned long) sk->sk_data_ready) {
+			memcpy(&tdata, &sk->sk_user_data, sizeof (tdata));
+			if (TCPOPT_TOA == tdata.opcode && TCPOLEN_TOA == tdata.opsize) {
+				TOA_INC_STATS(ext_stats, GETNAME_TOA_OK_CNT);
+				TOA_DBG("inet_getname_toa: set new sockaddr, ip %u.%u.%u.%u -> %u.%u.%u.%u, port %u -> %u\n",
+						NIPQUAD(sin->sin_addr.s_addr), NIPQUAD(tdata.ip), ntohs(sin->sin_port),
+						ntohs(tdata.port));
+				sin->sin_port = tdata.port;
+				sin->sin_addr.s_addr = tdata.ip;
+			} else { /* sk_user_data doesn't belong to us */
+				TOA_INC_STATS(ext_stats, GETNAME_TOA_MISMATCH_CNT);
+				TOA_DBG("inet_getname_toa: invalid toa data, ip %u.%u.%u.%u port %u opcode %u opsize %u\n",
+						NIPQUAD(tdata.ip), ntohs(tdata.port), tdata.opcode, tdata.opsize);
+			}
+		} else {
+			TOA_INC_STATS(ext_stats, GETNAME_TOA_BYPASS_CNT);
+		}
+	} else { /* no need to get client ip */
+		TOA_INC_STATS(ext_stats, GETNAME_TOA_EMPTY_CNT);
+	}
+
+	return retval;
+}
+
+#if defined(CONFIG_IPV6) || defined(CONFIG_IPV6_MODULE)
+static int
+inet6_getname_toa(struct socket *sock, struct sockaddr *uaddr, int *uaddr_len, int peer)
+{
+	int retval = 0;
+	struct sock *sk = sock->sk;
+	struct sockaddr_in6 *sin = (struct sockaddr_in6 *) uaddr;
+	struct toa6_data *tdata;
+
+	TOA_DBG("inet6_getname_toa called, sk->sk_user_data is %p\n", sk->sk_user_data);
+
+	/* call orginal one */
+	retval = inet6_getname(sock, uaddr, uaddr_len, peer);
+
+	/* set our value if need */
+	if (retval == 0 && NULL != sk->sk_user_data && peer) {
+		if (sk_data_ready_addr == (unsigned long) sk->sk_data_ready) {
+			tdata = sk->sk_user_data;
+			if (TCPOPT_TOA6 == tdata->opcode && TCPOLEN_TOA6 == tdata->opsize) {
+				TOA_INC_STATS(ext_stats, GETNAME_TOA_OK_CNT);
+				sin->sin6_port = tdata->port;
+				memcpy(&sin->sin6_addr, tdata->ip, sizeof(struct in6_addr));
+			} else { /* sk_user_data doesn't belong to us */
+				TOA_INC_STATS(ext_stats, GETNAME_TOA_MISMATCH_CNT);
+			}
+		} else {
+			TOA_INC_STATS(ext_stats, GETNAME_TOA_BYPASS_CNT);
+		}
+	} else { /* no need to get client ip */
+		TOA_INC_STATS(ext_stats, GETNAME_TOA_EMPTY_CNT);
+	}
+
+	return retval;
+}
+#endif
+
+/* The three way handshake has completed - we got a valid synack -
+ * now create the new socket.
+ * We need to save toa data into the new socket.
+ * @param sk [out]  the socket
+ * @param skb [in] the ack/ack-get packet
+ * @param req [in] the open request for this connection
+ * @param dst [out] route cache entry
+ * @return NULL if fail new socket if succeed.
+ */
+static struct sock *
+tcp_v4_syn_recv_sock_toa(struct sock *sk, struct sk_buff *skb, struct request_sock *req, struct dst_entry *dst)
+{
+	struct sock *newsock = NULL;
+
+	TOA_DBG("tcp_v4_syn_recv_sock_toa called\n");
+
+	/* call orginal one */
+	newsock = tcp_v4_syn_recv_sock(sk, skb, req, dst);
+
+	/* set our value if need */
+	if (NULL != newsock && NULL == newsock->sk_user_data) {
+		newsock->sk_user_data = get_toa_data(skb);
+		if(NULL != newsock->sk_user_data){
+			TOA_INC_STATS(ext_stats, SYN_RECV_SOCK_TOA_CNT);
+		} else {
+			TOA_INC_STATS(ext_stats, SYN_RECV_SOCK_NO_TOA_CNT);
+		}
+		TOA_DBG("tcp_v4_syn_recv_sock_toa: set sk->sk_user_data to %p\n", newsock->sk_user_data);
+	}
+	return newsock;
+}
+
+#if defined(CONFIG_IPV6) || defined(CONFIG_IPV6_MODULE)
+static struct sock *
+tcp_v6_syn_recv_sock_toa(struct sock *sk, struct sk_buff *skb, struct request_sock *req, struct dst_entry *dst)
+{
+	struct sock *newsock = NULL;
+
+	TOA_DBG("tcp_v4_syn_recv_sock_toa called\n");
+
+	/* call orginal one */
+	newsock = tcp_v6_syn_recv_sock(sk, skb, req, dst);
+
+	/* set our value if need */
+	if (NULL != newsock && NULL == newsock->sk_user_data) {
+		newsock->sk_user_data = get_toa_data(skb);
+		if(NULL != newsock->sk_user_data){
+			TOA_INC_STATS(ext_stats, SYN_RECV_SOCK_TOA_CNT);
+		} else {
+			TOA_INC_STATS(ext_stats, SYN_RECV_SOCK_NO_TOA_CNT);
+		}
+	}
+	return newsock;
+}
+#endif
+
+#if defined(CONFIG_IPV6) || defined(CONFIG_IPV6_MODULE)
+static void tcp_v6_destroy_sock_toa(struct sock *sk)
+{
+	struct toa6_data *tdata;
+
+	tcp_v6_destroy_sock(sk);
+	if ((tdata = sk->sk_user_data) != NULL) {
+		if (TCPOPT_TOA6 == tdata->opcode && TCPOLEN_TOA6 == tdata->opsize)
+			kmem_cache_free(toa6_slab, tdata);
+		sk->sk_user_data = NULL;
+	}
+}
+#endif
+
+/*
+ * HOOK FUNCS
+ */
+
+/* replace the functions with our functions */
+static inline int
+hook_toa_functions(void)
+{
+	struct proto_ops *inet_stream_ops_p;
+	struct proto_ops *inet6_stream_ops_p;
+	struct inet_connection_sock_af_ops *ipv4_specific_p;
+	struct inet_connection_sock_af_ops *ipv6_specific_p;
+
+	/* hook inet_getname for ipv4 */
+	inet_stream_ops_p = (struct proto_ops *)&inet_stream_ops;
+	inet_stream_ops_p->getname = inet_getname_toa;
+	TOA_INFO("CPU [%u] hooked inet_getname <%p> --> <%p>\n", smp_processor_id(), inet_getname,
+		 inet_stream_ops_p->getname);
+
+#if defined(CONFIG_IPV6) || defined(CONFIG_IPV6_MODULE)
+	/* hook inet6_getname for ipv6 */
+	inet6_stream_ops_p = (struct proto_ops *)&inet6_stream_ops;
+	inet6_stream_ops_p->getname = inet6_getname_toa;
+	TOA_INFO("CPU [%u] hooked inet6_getname <%p> --> <%p>\n", smp_processor_id(), inet6_getname,
+		 inet6_stream_ops_p->getname);
+#endif
+
+	/* hook tcp_v4_syn_recv_sock for ipv4 */
+	ipv4_specific_p = (struct inet_connection_sock_af_ops *)&ipv4_specific;
+	ipv4_specific_p->syn_recv_sock = tcp_v4_syn_recv_sock_toa;
+	TOA_INFO("CPU [%u] hooked tcp_v4_syn_recv_sock <%p> --> <%p>\n", smp_processor_id(), tcp_v4_syn_recv_sock,
+		 ipv4_specific_p->syn_recv_sock);
+
+#if defined(CONFIG_IPV6) || defined(CONFIG_IPV6_MODULE)
+	/* hook tcp_v6_syn_recv_sock for ipv6 */
+	ipv6_specific_p = (struct inet_connection_sock_af_ops *)&ipv6_specific;
+	ipv6_specific_p->syn_recv_sock = tcp_v6_syn_recv_sock_toa;
+	TOA_INFO("CPU [%u] hooked tcp_v6_syn_recv_sock <%p> --> <%p>\n", smp_processor_id(), tcp_v6_syn_recv_sock,
+		 ipv6_specific_p->syn_recv_sock);
+#endif
+
+#if defined(CONFIG_IPV6) || defined(CONFIG_IPV6_MODULE)
+	/* hook tcp_v6_destroy_sock for ipv6 */
+	tcpv6_prot_p = (struct proto *)&tcpv6_prot;
+	tcpv6_prot_p->destory = tcp_v6_destroy_sock_toa;
+	TOA_INFO("CPU [%u] hooked tcp_v6_destroy_sock <%p> --> <%p>\n", smp_processor_id(), tcp_v6_destroy_sock,
+		 tcpv6_prot_p->destory );
+#endif
+
+	return 0;
+}
+
+/* replace the functions to original ones */
+static int
+unhook_toa_functions(void)
+{
+	struct proto_ops *inet_stream_ops_p;
+	struct proto_ops *inet6_stream_ops_p;
+	struct inet_connection_sock_af_ops *ipv4_specific_p;
+	struct inet_connection_sock_af_ops *ipv6_specific_p;
+
+	/* unhook inet_getname for ipv4 */
+	inet_stream_ops_p = (struct proto_ops *)&inet_stream_ops;
+	inet_stream_ops_p->getname = inet_getname;
+	TOA_INFO("CPU [%u] unhooked inet_getname\n", smp_processor_id());
+
+#if defined(CONFIG_IPV6) || defined(CONFIG_IPV6_MODULE)
+	/* unhook inet6_getname for ipv6 */
+	inet6_stream_ops_p = (struct proto_ops *)&inet6_stream_ops;
+	inet6_stream_ops_p->getname = inet6_getname;
+	TOA_INFO("CPU [%u] unhooked inet6_getname\n", smp_processor_id());
+#endif
+
+	/* unhook tcp_v4_syn_recv_sock for ipv4 */
+	ipv4_specific_p = (struct inet_connection_sock_af_ops *)&ipv4_specific;
+	ipv4_specific_p->syn_recv_sock = tcp_v4_syn_recv_sock;
+	TOA_INFO("CPU [%u] unhooked tcp_v4_syn_recv_sock\n", smp_processor_id());
+
+#if defined(CONFIG_IPV6) || defined(CONFIG_IPV6_MODULE)
+	/* unhook tcp_v6_syn_recv_sock for ipv6 */
+	ipv6_specific_p = (struct inet_connection_sock_af_ops *)&ipv6_specific;
+	ipv6_specific_p->syn_recv_sock = tcp_v6_syn_recv_sock;
+	TOA_INFO("CPU [%u] unhooked tcp_v6_syn_recv_sock\n", smp_processor_id());
+#endif
+
+	return 0;
+}
+
+/*
+ * Statistics of toa in proc /proc/net/toa_stats
+ */
+static int toa_stats_show(struct seq_file *seq, void *v){
+	int i, j;
+
+	/* print CPU first */
+	seq_printf(seq, "                                  ");
+	for (i = 0; i < NR_CPUS; i++)
+		if (cpu_online(i))
+			seq_printf(seq, "CPU%d       ", i);
+	seq_putc(seq, '\n');
+
+	i = 0;
+	while (NULL != toa_stats[i].name) {
+		seq_printf(seq, "%-25s:", toa_stats[i].name);
+		for (j = 0; j < NR_CPUS; j++) {
+			if (cpu_online(j)) {
+				seq_printf(seq, "%10lu ",
+					   *(((unsigned long *) per_cpu_ptr(ext_stats, j)) + toa_stats[i].entry));
+			}
+		}
+		seq_putc(seq, '\n');
+		i++;
+	}
+	return 0;
+}
+
+static int toa_stats_seq_open(struct inode *inode, struct file *file)
+{
+	return single_open(file, toa_stats_show, NULL);
+}
+
+static const struct file_operations toa_stats_fops = {
+	.owner = THIS_MODULE,
+	.open = toa_stats_seq_open,
+	.read = seq_read,
+	.llseek = seq_lseek,
+	.release = single_release,
+};
+
+static int toa_proc_init(void)
+{
+	if (!proc_create("toa", S_IRUGO, init_net.proc_net, &toa_stats_fops))
+		return -ENOMEM;
+	return 0;
+}
+
+static void toa_proc_exit(void)
+{
+	remove_proc_entry("toa", init_net.proc_net);
+}
+
+/*
+ * TOA module init and destory
+ */
+
+/* module init */
+static int __init
+toa_init(void)
+{
+	TOA_INFO("TOA " TOA_VERSION "\n");
+
+	/* alloc statistics array for toa */
+	if (NULL == (ext_stats = alloc_percpu(struct toa_stat_mib)))
+		return 1;
+	toa_proc_init();
+
+	/* get the address of function sock_def_readable
+	 * so later we can know whether the sock is for rpc, tux or others
+	 */
+	sk_data_ready_addr = kallsyms_lookup_name("sock_def_readable");
+	TOA_INFO("CPU [%u] sk_data_ready_addr = kallsyms_lookup_name(sock_def_readable) = %lu\n",
+		 smp_processor_id(), sk_data_ready_addr);
+	if(0 == sk_data_ready_addr) {
+		TOA_INFO("cannot find sock_def_readable.\n");
+		goto err;
+	}
+
+	toa6_slab = kmem_cache_create("toa6", sizeof(struct toa6_data), 0,
+		SLAB_HWCACHE_ALIGN | SLAB_DESTROY_BY_RCU, NULL);
+	if (toa6_slab == NULL) {
+		TOA_INFO("cannot create toa6 slab cache.\n");
+		goto err;
+	}
+
+	/* hook funcs for parse and get toa */
+	hook_toa_functions();
+
+	TOA_INFO("toa loaded\n");
+	return 0;
+
+err:
+	toa_proc_exit();
+	if (NULL != ext_stats) {
+		free_percpu(ext_stats);
+		ext_stats = NULL;
+	}
+
+	return 1;
+}
+
+/* module cleanup*/
+static void __exit
+toa_exit(void)
+{
+	unhook_toa_functions();
+	synchronize_net();
+
+	if (toa6_slab != NULL) {
+		kmem_cache_destroy(toa6_slab);
+		toa6_slab = NULL;
+	}
+
+	toa_proc_exit();
+	if (NULL != ext_stats) {
+		free_percpu(ext_stats);
+		ext_stats = NULL;
+	}
+	TOA_INFO("toa unloaded\n");
+}
+
+module_init(toa_init);
+module_exit(toa_exit);
+MODULE_LICENSE("GPL");
+
diff -Nrpu linux-3.10.0-693.5.2.el7.orig/net/toa/toa.h linux-3.10.0-693.5.2.el7/net/toa/toa.h
--- linux-3.10.0-693.5.2.el7.orig/net/toa/toa.h	1970-01-01 08:00:00.000000000 +0800
+++ linux-3.10.0-693.5.2.el7/net/toa/toa.h	2019-01-14 14:18:08.000000000 +0800
@@ -0,0 +1,95 @@
+#ifndef __NET__TOA_H__
+#define __NET__TOA_H__
+
+#include <linux/init.h>
+#include <linux/module.h>
+#include <linux/kernel.h>
+#include <linux/version.h>
+#include <linux/err.h>
+#include <linux/time.h>
+#include <linux/skbuff.h>
+#include <net/tcp.h>
+#include <net/inet_common.h>
+#include <asm/uaccess.h>
+#include <linux/netdevice.h>
+#include <net/net_namespace.h>
+#include <linux/fs.h>
+#include <linux/sysctl.h>
+#include <linux/proc_fs.h>
+#include <linux/kallsyms.h>
+#include <net/ipv6.h>
+#include <net/transp_v6.h>
+
+#define TOA_VERSION "1.0.0.0"
+
+#define TOA_DBG(msg...)			\
+    do {						\
+          printk(KERN_DEBUG "[DEBUG] TOA: " msg);       \
+    } while (0)
+
+#define TOA_INFO(msg...)			\
+     do { \
+          if(net_ratelimit()) \
+               printk(KERN_INFO "TOA: " msg);\
+     } while(0)
+
+#define TCPOPT_TOA  200
+#define TCPOPT_TOA6 201
+
+/* MUST be 4n !!!! */
+#define TCPOLEN_TOA 8		/* |opcode|size|ip+port| = 1 + 1 + 6 */
+#define TCPOLEN_TOA6 20		/* |opcode|size|ip+port| = 1 + 1 + 18 */
+
+/* MUST be 4 bytes alignment */
+struct toa_data {
+	__u8 opcode;
+	__u8 opsize;
+	__u16 port;
+	__u32 ip;
+};
+
+struct toa6_data {
+	__u8 opcode;
+	__u8 opsize;
+	__u16 port;
+	__u32 ip[4];
+};
+
+/* statistics about toa in proc /proc/net/toa_stat */
+enum {
+	SYN_RECV_SOCK_TOA_CNT = 1,
+	SYN_RECV_SOCK_NO_TOA_CNT,
+	GETNAME_TOA_OK_CNT,
+	GETNAME_TOA_MISMATCH_CNT,
+	GETNAME_TOA_BYPASS_CNT,
+	GETNAME_TOA_EMPTY_CNT,
+	TOA_STAT_LAST
+};
+
+struct toa_stats_entry {
+	char *name;
+	int entry;
+};
+
+#define TOA_STAT_ITEM(_name, _entry) { \
+        .name = _name,            \
+        .entry = _entry,          \
+}
+
+#define TOA_STAT_END {    \
+        NULL,           \
+        0,              \
+}
+
+struct toa_stat_mib {
+	unsigned long mibs[TOA_STAT_LAST];
+};
+
+#define DEFINE_TOA_STAT(type, name)       \
+        __typeof__(type) *name
+#define TOA_INC_STATS(mib, field)         \
+        (per_cpu_ptr(mib, smp_processor_id())->mibs[field]++)
+
+
+#endif
+
